
GccApplication8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000064c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800100  00800100  0000064c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000064c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000067c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ae0  00000000  00000000  0000070c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000076a  00000000  00000000  000011ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000035d  00000000  00000000  00001956  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00001cb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ce  00000000  00000000  00001d74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002a0  00000000  00000000  00002242  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000024e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 31       	cpi	r26, 0x10	; 16
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <main>
  88:	0c 94 ea 02 	jmp	0x5d4	; 0x5d4 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:
	}
}

void initADC() {
	// Set reference voltage to AVcc and select channel 0
	ADMUX = (1 << REFS0);
  90:	80 e4       	ldi	r24, 0x40	; 64
  92:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	// Enable ADC and set prescaler to 128 (16 MHz / 128 = 125 KHz)
	ADCSRA = (1 << ADEN) | (7 << ADPS0);
  96:	87 e8       	ldi	r24, 0x87	; 135
  98:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  9c:	08 95       	ret

0000009e <readADC>:
}

uint16_t readADC(uint8_t channel) {
	// Select ADC channel
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);
  9e:	ec e7       	ldi	r30, 0x7C	; 124
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	90 81       	ld	r25, Z
  a4:	90 7f       	andi	r25, 0xF0	; 240
  a6:	8f 70       	andi	r24, 0x0F	; 15
  a8:	89 2b       	or	r24, r25
  aa:	80 83       	st	Z, r24
	// Start conversion
	ADCSRA |= (1 << ADSC);
  ac:	ea e7       	ldi	r30, 0x7A	; 122
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	80 83       	st	Z, r24
	// Wait for conversion to complete
	while (ADCSRA & (1 << ADSC));
  b6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  ba:	86 fd       	sbrc	r24, 6
  bc:	fc cf       	rjmp	.-8      	; 0xb6 <readADC+0x18>
	// Return ADC value
	return ADC;
  be:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  c2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  c6:	08 95       	ret

000000c8 <initPWM>:

void initPWM() {
	// Set servo pins as output
	DDRB |= (1 << SERVO_X_PIN) | (1 << SERVO_Y_PIN);
  c8:	84 b1       	in	r24, 0x04	; 4
  ca:	86 60       	ori	r24, 0x06	; 6
  cc:	84 b9       	out	0x04, r24	; 4
	// Set Fast PWM mode, non-inverting
	TCCR1A = (1 << WGM11) | (1 << COM1A1) | (1 << COM1B1);
  ce:	82 ea       	ldi	r24, 0xA2	; 162
  d0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11); // Prescaler 8
  d4:	8a e1       	ldi	r24, 0x1A	; 26
  d6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	ICR1 = 39999; // 50 Hz (20 ms period)
  da:	8f e3       	ldi	r24, 0x3F	; 63
  dc:	9c e9       	ldi	r25, 0x9C	; 156
  de:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  e2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
  e6:	08 95       	ret

000000e8 <setServoPositionX>:
}

void setServoPositionX(double position) {
	// Map position (-1 to 1) to servo pulse width (1000 to 2000 us)
	uint16_t pulseWidth = (uint16_t)(1500 + (position * 500));
  e8:	20 e0       	ldi	r18, 0x00	; 0
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	4a ef       	ldi	r20, 0xFA	; 250
  ee:	53 e4       	ldi	r21, 0x43	; 67
  f0:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__mulsf3>
  f4:	20 e0       	ldi	r18, 0x00	; 0
  f6:	30 e8       	ldi	r19, 0x80	; 128
  f8:	4b eb       	ldi	r20, 0xBB	; 187
  fa:	54 e4       	ldi	r21, 0x44	; 68
  fc:	0e 94 54 01 	call	0x2a8	; 0x2a8 <__addsf3>
 100:	0e 94 c0 01 	call	0x380	; 0x380 <__fixunssfsi>
	OCR1A = pulseWidth;
 104:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 108:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 10c:	08 95       	ret

0000010e <setServoPositionY>:
}

void setServoPositionY(double position) {
	// Map position (-1 to 1) to servo pulse width (1000 to 2000 us)
	uint16_t pulseWidth = (uint16_t)(1500 + (position * 500));
 10e:	20 e0       	ldi	r18, 0x00	; 0
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	4a ef       	ldi	r20, 0xFA	; 250
 114:	53 e4       	ldi	r21, 0x43	; 67
 116:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__mulsf3>
 11a:	20 e0       	ldi	r18, 0x00	; 0
 11c:	30 e8       	ldi	r19, 0x80	; 128
 11e:	4b eb       	ldi	r20, 0xBB	; 187
 120:	54 e4       	ldi	r21, 0x44	; 68
 122:	0e 94 54 01 	call	0x2a8	; 0x2a8 <__addsf3>
 126:	0e 94 c0 01 	call	0x380	; 0x380 <__fixunssfsi>
	OCR1B = pulseWidth;
 12a:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 12e:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 132:	08 95       	ret

00000134 <PIDControl>:
}

double PIDControl(double setpoint, double measured, volatile double *prevError, volatile double *integral) {
 134:	8f 92       	push	r8
 136:	9f 92       	push	r9
 138:	af 92       	push	r10
 13a:	bf 92       	push	r11
 13c:	cf 92       	push	r12
 13e:	df 92       	push	r13
 140:	ef 92       	push	r14
 142:	ff 92       	push	r15
 144:	0f 93       	push	r16
 146:	1f 93       	push	r17
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	e7 01       	movw	r28, r14
	double error = setpoint - measured;
 14e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <__subsf3>
 152:	6b 01       	movw	r12, r22
 154:	7c 01       	movw	r14, r24
	*integral += error;
 156:	28 81       	ld	r18, Y
 158:	39 81       	ldd	r19, Y+1	; 0x01
 15a:	4a 81       	ldd	r20, Y+2	; 0x02
 15c:	5b 81       	ldd	r21, Y+3	; 0x03
 15e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <__addsf3>
 162:	68 83       	st	Y, r22
 164:	79 83       	std	Y+1, r23	; 0x01
 166:	8a 83       	std	Y+2, r24	; 0x02
 168:	9b 83       	std	Y+3, r25	; 0x03
	double derivative = error - *prevError;
 16a:	f8 01       	movw	r30, r16
 16c:	20 81       	ld	r18, Z
 16e:	31 81       	ldd	r19, Z+1	; 0x01
 170:	42 81       	ldd	r20, Z+2	; 0x02
 172:	53 81       	ldd	r21, Z+3	; 0x03
 174:	c7 01       	movw	r24, r14
 176:	b6 01       	movw	r22, r12
 178:	0e 94 53 01 	call	0x2a6	; 0x2a6 <__subsf3>
 17c:	4b 01       	movw	r8, r22
 17e:	5c 01       	movw	r10, r24
	*prevError = error;
 180:	f8 01       	movw	r30, r16
 182:	c0 82       	st	Z, r12
 184:	d1 82       	std	Z+1, r13	; 0x01
 186:	e2 82       	std	Z+2, r14	; 0x02
 188:	f3 82       	std	Z+3, r15	; 0x03
	return KP * error + KI * *integral + KD * derivative;
 18a:	68 81       	ld	r22, Y
 18c:	79 81       	ldd	r23, Y+1	; 0x01
 18e:	8a 81       	ldd	r24, Y+2	; 0x02
 190:	9b 81       	ldd	r25, Y+3	; 0x03
 192:	2d ec       	ldi	r18, 0xCD	; 205
 194:	3c ec       	ldi	r19, 0xCC	; 204
 196:	4c ec       	ldi	r20, 0xCC	; 204
 198:	5d e3       	ldi	r21, 0x3D	; 61
 19a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__mulsf3>
 19e:	9b 01       	movw	r18, r22
 1a0:	ac 01       	movw	r20, r24
 1a2:	c7 01       	movw	r24, r14
 1a4:	b6 01       	movw	r22, r12
 1a6:	0e 94 54 01 	call	0x2a8	; 0x2a8 <__addsf3>
 1aa:	6b 01       	movw	r12, r22
 1ac:	7c 01       	movw	r14, r24
 1ae:	2d ec       	ldi	r18, 0xCD	; 205
 1b0:	3c ec       	ldi	r19, 0xCC	; 204
 1b2:	4c e4       	ldi	r20, 0x4C	; 76
 1b4:	5d e3       	ldi	r21, 0x3D	; 61
 1b6:	c5 01       	movw	r24, r10
 1b8:	b4 01       	movw	r22, r8
 1ba:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__mulsf3>
 1be:	9b 01       	movw	r18, r22
 1c0:	ac 01       	movw	r20, r24
 1c2:	c7 01       	movw	r24, r14
 1c4:	b6 01       	movw	r22, r12
 1c6:	0e 94 54 01 	call	0x2a8	; 0x2a8 <__addsf3>
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	1f 91       	pop	r17
 1d0:	0f 91       	pop	r16
 1d2:	ff 90       	pop	r15
 1d4:	ef 90       	pop	r14
 1d6:	df 90       	pop	r13
 1d8:	cf 90       	pop	r12
 1da:	bf 90       	pop	r11
 1dc:	af 90       	pop	r10
 1de:	9f 90       	pop	r9
 1e0:	8f 90       	pop	r8
 1e2:	08 95       	ret

000001e4 <main>:
void setServoPositionY(double position);
double PIDControl(double setpoint, double measured, volatile double *prevError, volatile double *integral);

int main(void) {
	// Initialize ADC and PWM
	initADC();
 1e4:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
	initPWM();
 1e8:	0e 94 64 00 	call	0xc8	; 0xc8 <initPWM>
	sei(); // Enable global interrupts
 1ec:	78 94       	sei

	// Main loop
	while (1) {
		// Read sensor values
		uint16_t sensor1 = readADC(0);
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	0e 94 4f 00 	call	0x9e	; 0x9e <readADC>
 1f4:	6c 01       	movw	r12, r24
		uint16_t sensor2 = readADC(1);
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	0e 94 4f 00 	call	0x9e	; 0x9e <readADC>
 1fc:	7c 01       	movw	r14, r24
		uint16_t sensor3 = readADC(2);
 1fe:	82 e0       	ldi	r24, 0x02	; 2
 200:	0e 94 4f 00 	call	0x9e	; 0x9e <readADC>
 204:	ec 01       	movw	r28, r24
		uint16_t sensor4 = readADC(3);
 206:	83 e0       	ldi	r24, 0x03	; 3
 208:	0e 94 4f 00 	call	0x9e	; 0x9e <readADC>
 20c:	8c 01       	movw	r16, r24

		// Calculate average light intensity
		double avgX = (sensor1 + sensor2) - (sensor3 + sensor4);
 20e:	b6 01       	movw	r22, r12
 210:	6e 0d       	add	r22, r14
 212:	7f 1d       	adc	r23, r15
 214:	ce 01       	movw	r24, r28
 216:	80 0f       	add	r24, r16
 218:	91 1f       	adc	r25, r17
 21a:	68 1b       	sub	r22, r24
 21c:	79 0b       	sbc	r23, r25
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 ef 01 	call	0x3de	; 0x3de <__floatunsisf>
 226:	4b 01       	movw	r8, r22
 228:	5c 01       	movw	r10, r24
		double avgY = (sensor1 + sensor3) - (sensor2 + sensor4);
 22a:	cc 0d       	add	r28, r12
 22c:	dd 1d       	adc	r29, r13
 22e:	0e 0d       	add	r16, r14
 230:	1f 1d       	adc	r17, r15
 232:	c0 1b       	sub	r28, r16
 234:	d1 0b       	sbc	r29, r17
 236:	be 01       	movw	r22, r28
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 ef 01 	call	0x3de	; 0x3de <__floatunsisf>
 240:	2b 01       	movw	r4, r22
 242:	3c 01       	movw	r6, r24

		// PID control for X and Y axes
		double setpoint = 0; // Desired position (centered light)
		double controlX = PIDControl(setpoint, avgX, &prevErrorX, &integralX);
 244:	0f 2e       	mov	r0, r31
 246:	f4 e0       	ldi	r31, 0x04	; 4
 248:	ef 2e       	mov	r14, r31
 24a:	f1 e0       	ldi	r31, 0x01	; 1
 24c:	ff 2e       	mov	r15, r31
 24e:	f0 2d       	mov	r31, r0
 250:	0c e0       	ldi	r16, 0x0C	; 12
 252:	11 e0       	ldi	r17, 0x01	; 1
 254:	a5 01       	movw	r20, r10
 256:	94 01       	movw	r18, r8
 258:	60 e0       	ldi	r22, 0x00	; 0
 25a:	70 e0       	ldi	r23, 0x00	; 0
 25c:	cb 01       	movw	r24, r22
 25e:	0e 94 9a 00 	call	0x134	; 0x134 <PIDControl>
 262:	4b 01       	movw	r8, r22
 264:	5c 01       	movw	r10, r24
		double controlY = PIDControl(setpoint, avgY, &prevErrorY, &integralY);
 266:	0f 2e       	mov	r0, r31
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	ef 2e       	mov	r14, r31
 26c:	f1 e0       	ldi	r31, 0x01	; 1
 26e:	ff 2e       	mov	r15, r31
 270:	f0 2d       	mov	r31, r0
 272:	08 e0       	ldi	r16, 0x08	; 8
 274:	11 e0       	ldi	r17, 0x01	; 1
 276:	a3 01       	movw	r20, r6
 278:	92 01       	movw	r18, r4
 27a:	60 e0       	ldi	r22, 0x00	; 0
 27c:	70 e0       	ldi	r23, 0x00	; 0
 27e:	cb 01       	movw	r24, r22
 280:	0e 94 9a 00 	call	0x134	; 0x134 <PIDControl>
 284:	6b 01       	movw	r12, r22
 286:	7c 01       	movw	r14, r24

		// Set servo positions based on PID output
		setServoPositionX(controlX);
 288:	c5 01       	movw	r24, r10
 28a:	b4 01       	movw	r22, r8
 28c:	0e 94 74 00 	call	0xe8	; 0xe8 <setServoPositionX>
		setServoPositionY(controlY);
 290:	c7 01       	movw	r24, r14
 292:	b6 01       	movw	r22, r12
 294:	0e 94 87 00 	call	0x10e	; 0x10e <setServoPositionY>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 298:	87 ea       	ldi	r24, 0xA7	; 167
 29a:	91 e6       	ldi	r25, 0x61	; 97
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <main+0xb8>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <main+0xbe>
 2a2:	00 00       	nop
 2a4:	a4 cf       	rjmp	.-184    	; 0x1ee <main+0xa>

000002a6 <__subsf3>:
 2a6:	50 58       	subi	r21, 0x80	; 128

000002a8 <__addsf3>:
 2a8:	bb 27       	eor	r27, r27
 2aa:	aa 27       	eor	r26, r26
 2ac:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <__addsf3x>
 2b0:	0c 94 43 02 	jmp	0x486	; 0x486 <__fp_round>
 2b4:	0e 94 35 02 	call	0x46a	; 0x46a <__fp_pscA>
 2b8:	38 f0       	brcs	.+14     	; 0x2c8 <__addsf3+0x20>
 2ba:	0e 94 3c 02 	call	0x478	; 0x478 <__fp_pscB>
 2be:	20 f0       	brcs	.+8      	; 0x2c8 <__addsf3+0x20>
 2c0:	39 f4       	brne	.+14     	; 0x2d0 <__addsf3+0x28>
 2c2:	9f 3f       	cpi	r25, 0xFF	; 255
 2c4:	19 f4       	brne	.+6      	; 0x2cc <__addsf3+0x24>
 2c6:	26 f4       	brtc	.+8      	; 0x2d0 <__addsf3+0x28>
 2c8:	0c 94 32 02 	jmp	0x464	; 0x464 <__fp_nan>
 2cc:	0e f4       	brtc	.+2      	; 0x2d0 <__addsf3+0x28>
 2ce:	e0 95       	com	r30
 2d0:	e7 fb       	bst	r30, 7
 2d2:	0c 94 2c 02 	jmp	0x458	; 0x458 <__fp_inf>

000002d6 <__addsf3x>:
 2d6:	e9 2f       	mov	r30, r25
 2d8:	0e 94 54 02 	call	0x4a8	; 0x4a8 <__fp_split3>
 2dc:	58 f3       	brcs	.-42     	; 0x2b4 <__addsf3+0xc>
 2de:	ba 17       	cp	r27, r26
 2e0:	62 07       	cpc	r22, r18
 2e2:	73 07       	cpc	r23, r19
 2e4:	84 07       	cpc	r24, r20
 2e6:	95 07       	cpc	r25, r21
 2e8:	20 f0       	brcs	.+8      	; 0x2f2 <__addsf3x+0x1c>
 2ea:	79 f4       	brne	.+30     	; 0x30a <__addsf3x+0x34>
 2ec:	a6 f5       	brtc	.+104    	; 0x356 <__addsf3x+0x80>
 2ee:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__fp_zero>
 2f2:	0e f4       	brtc	.+2      	; 0x2f6 <__addsf3x+0x20>
 2f4:	e0 95       	com	r30
 2f6:	0b 2e       	mov	r0, r27
 2f8:	ba 2f       	mov	r27, r26
 2fa:	a0 2d       	mov	r26, r0
 2fc:	0b 01       	movw	r0, r22
 2fe:	b9 01       	movw	r22, r18
 300:	90 01       	movw	r18, r0
 302:	0c 01       	movw	r0, r24
 304:	ca 01       	movw	r24, r20
 306:	a0 01       	movw	r20, r0
 308:	11 24       	eor	r1, r1
 30a:	ff 27       	eor	r31, r31
 30c:	59 1b       	sub	r21, r25
 30e:	99 f0       	breq	.+38     	; 0x336 <__addsf3x+0x60>
 310:	59 3f       	cpi	r21, 0xF9	; 249
 312:	50 f4       	brcc	.+20     	; 0x328 <__addsf3x+0x52>
 314:	50 3e       	cpi	r21, 0xE0	; 224
 316:	68 f1       	brcs	.+90     	; 0x372 <__addsf3x+0x9c>
 318:	1a 16       	cp	r1, r26
 31a:	f0 40       	sbci	r31, 0x00	; 0
 31c:	a2 2f       	mov	r26, r18
 31e:	23 2f       	mov	r18, r19
 320:	34 2f       	mov	r19, r20
 322:	44 27       	eor	r20, r20
 324:	58 5f       	subi	r21, 0xF8	; 248
 326:	f3 cf       	rjmp	.-26     	; 0x30e <__addsf3x+0x38>
 328:	46 95       	lsr	r20
 32a:	37 95       	ror	r19
 32c:	27 95       	ror	r18
 32e:	a7 95       	ror	r26
 330:	f0 40       	sbci	r31, 0x00	; 0
 332:	53 95       	inc	r21
 334:	c9 f7       	brne	.-14     	; 0x328 <__addsf3x+0x52>
 336:	7e f4       	brtc	.+30     	; 0x356 <__addsf3x+0x80>
 338:	1f 16       	cp	r1, r31
 33a:	ba 0b       	sbc	r27, r26
 33c:	62 0b       	sbc	r22, r18
 33e:	73 0b       	sbc	r23, r19
 340:	84 0b       	sbc	r24, r20
 342:	ba f0       	brmi	.+46     	; 0x372 <__addsf3x+0x9c>
 344:	91 50       	subi	r25, 0x01	; 1
 346:	a1 f0       	breq	.+40     	; 0x370 <__addsf3x+0x9a>
 348:	ff 0f       	add	r31, r31
 34a:	bb 1f       	adc	r27, r27
 34c:	66 1f       	adc	r22, r22
 34e:	77 1f       	adc	r23, r23
 350:	88 1f       	adc	r24, r24
 352:	c2 f7       	brpl	.-16     	; 0x344 <__addsf3x+0x6e>
 354:	0e c0       	rjmp	.+28     	; 0x372 <__addsf3x+0x9c>
 356:	ba 0f       	add	r27, r26
 358:	62 1f       	adc	r22, r18
 35a:	73 1f       	adc	r23, r19
 35c:	84 1f       	adc	r24, r20
 35e:	48 f4       	brcc	.+18     	; 0x372 <__addsf3x+0x9c>
 360:	87 95       	ror	r24
 362:	77 95       	ror	r23
 364:	67 95       	ror	r22
 366:	b7 95       	ror	r27
 368:	f7 95       	ror	r31
 36a:	9e 3f       	cpi	r25, 0xFE	; 254
 36c:	08 f0       	brcs	.+2      	; 0x370 <__addsf3x+0x9a>
 36e:	b0 cf       	rjmp	.-160    	; 0x2d0 <__addsf3+0x28>
 370:	93 95       	inc	r25
 372:	88 0f       	add	r24, r24
 374:	08 f0       	brcs	.+2      	; 0x378 <__addsf3x+0xa2>
 376:	99 27       	eor	r25, r25
 378:	ee 0f       	add	r30, r30
 37a:	97 95       	ror	r25
 37c:	87 95       	ror	r24
 37e:	08 95       	ret

00000380 <__fixunssfsi>:
 380:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <__fp_splitA>
 384:	88 f0       	brcs	.+34     	; 0x3a8 <__fixunssfsi+0x28>
 386:	9f 57       	subi	r25, 0x7F	; 127
 388:	98 f0       	brcs	.+38     	; 0x3b0 <__fixunssfsi+0x30>
 38a:	b9 2f       	mov	r27, r25
 38c:	99 27       	eor	r25, r25
 38e:	b7 51       	subi	r27, 0x17	; 23
 390:	b0 f0       	brcs	.+44     	; 0x3be <__fixunssfsi+0x3e>
 392:	e1 f0       	breq	.+56     	; 0x3cc <__fixunssfsi+0x4c>
 394:	66 0f       	add	r22, r22
 396:	77 1f       	adc	r23, r23
 398:	88 1f       	adc	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	1a f0       	brmi	.+6      	; 0x3a4 <__fixunssfsi+0x24>
 39e:	ba 95       	dec	r27
 3a0:	c9 f7       	brne	.-14     	; 0x394 <__fixunssfsi+0x14>
 3a2:	14 c0       	rjmp	.+40     	; 0x3cc <__fixunssfsi+0x4c>
 3a4:	b1 30       	cpi	r27, 0x01	; 1
 3a6:	91 f0       	breq	.+36     	; 0x3cc <__fixunssfsi+0x4c>
 3a8:	0e 94 76 02 	call	0x4ec	; 0x4ec <__fp_zero>
 3ac:	b1 e0       	ldi	r27, 0x01	; 1
 3ae:	08 95       	ret
 3b0:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__fp_zero>
 3b4:	67 2f       	mov	r22, r23
 3b6:	78 2f       	mov	r23, r24
 3b8:	88 27       	eor	r24, r24
 3ba:	b8 5f       	subi	r27, 0xF8	; 248
 3bc:	39 f0       	breq	.+14     	; 0x3cc <__fixunssfsi+0x4c>
 3be:	b9 3f       	cpi	r27, 0xF9	; 249
 3c0:	cc f3       	brlt	.-14     	; 0x3b4 <__fixunssfsi+0x34>
 3c2:	86 95       	lsr	r24
 3c4:	77 95       	ror	r23
 3c6:	67 95       	ror	r22
 3c8:	b3 95       	inc	r27
 3ca:	d9 f7       	brne	.-10     	; 0x3c2 <__fixunssfsi+0x42>
 3cc:	3e f4       	brtc	.+14     	; 0x3dc <__fixunssfsi+0x5c>
 3ce:	90 95       	com	r25
 3d0:	80 95       	com	r24
 3d2:	70 95       	com	r23
 3d4:	61 95       	neg	r22
 3d6:	7f 4f       	sbci	r23, 0xFF	; 255
 3d8:	8f 4f       	sbci	r24, 0xFF	; 255
 3da:	9f 4f       	sbci	r25, 0xFF	; 255
 3dc:	08 95       	ret

000003de <__floatunsisf>:
 3de:	e8 94       	clt
 3e0:	09 c0       	rjmp	.+18     	; 0x3f4 <__floatsisf+0x12>

000003e2 <__floatsisf>:
 3e2:	97 fb       	bst	r25, 7
 3e4:	3e f4       	brtc	.+14     	; 0x3f4 <__floatsisf+0x12>
 3e6:	90 95       	com	r25
 3e8:	80 95       	com	r24
 3ea:	70 95       	com	r23
 3ec:	61 95       	neg	r22
 3ee:	7f 4f       	sbci	r23, 0xFF	; 255
 3f0:	8f 4f       	sbci	r24, 0xFF	; 255
 3f2:	9f 4f       	sbci	r25, 0xFF	; 255
 3f4:	99 23       	and	r25, r25
 3f6:	a9 f0       	breq	.+42     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 3f8:	f9 2f       	mov	r31, r25
 3fa:	96 e9       	ldi	r25, 0x96	; 150
 3fc:	bb 27       	eor	r27, r27
 3fe:	93 95       	inc	r25
 400:	f6 95       	lsr	r31
 402:	87 95       	ror	r24
 404:	77 95       	ror	r23
 406:	67 95       	ror	r22
 408:	b7 95       	ror	r27
 40a:	f1 11       	cpse	r31, r1
 40c:	f8 cf       	rjmp	.-16     	; 0x3fe <__floatsisf+0x1c>
 40e:	fa f4       	brpl	.+62     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 410:	bb 0f       	add	r27, r27
 412:	11 f4       	brne	.+4      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 414:	60 ff       	sbrs	r22, 0
 416:	1b c0       	rjmp	.+54     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 418:	6f 5f       	subi	r22, 0xFF	; 255
 41a:	7f 4f       	sbci	r23, 0xFF	; 255
 41c:	8f 4f       	sbci	r24, 0xFF	; 255
 41e:	9f 4f       	sbci	r25, 0xFF	; 255
 420:	16 c0       	rjmp	.+44     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 422:	88 23       	and	r24, r24
 424:	11 f0       	breq	.+4      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 426:	96 e9       	ldi	r25, 0x96	; 150
 428:	11 c0       	rjmp	.+34     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 42a:	77 23       	and	r23, r23
 42c:	21 f0       	breq	.+8      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 42e:	9e e8       	ldi	r25, 0x8E	; 142
 430:	87 2f       	mov	r24, r23
 432:	76 2f       	mov	r23, r22
 434:	05 c0       	rjmp	.+10     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 436:	66 23       	and	r22, r22
 438:	71 f0       	breq	.+28     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 43a:	96 e8       	ldi	r25, 0x86	; 134
 43c:	86 2f       	mov	r24, r22
 43e:	70 e0       	ldi	r23, 0x00	; 0
 440:	60 e0       	ldi	r22, 0x00	; 0
 442:	2a f0       	brmi	.+10     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 444:	9a 95       	dec	r25
 446:	66 0f       	add	r22, r22
 448:	77 1f       	adc	r23, r23
 44a:	88 1f       	adc	r24, r24
 44c:	da f7       	brpl	.-10     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 44e:	88 0f       	add	r24, r24
 450:	96 95       	lsr	r25
 452:	87 95       	ror	r24
 454:	97 f9       	bld	r25, 7
 456:	08 95       	ret

00000458 <__fp_inf>:
 458:	97 f9       	bld	r25, 7
 45a:	9f 67       	ori	r25, 0x7F	; 127
 45c:	80 e8       	ldi	r24, 0x80	; 128
 45e:	70 e0       	ldi	r23, 0x00	; 0
 460:	60 e0       	ldi	r22, 0x00	; 0
 462:	08 95       	ret

00000464 <__fp_nan>:
 464:	9f ef       	ldi	r25, 0xFF	; 255
 466:	80 ec       	ldi	r24, 0xC0	; 192
 468:	08 95       	ret

0000046a <__fp_pscA>:
 46a:	00 24       	eor	r0, r0
 46c:	0a 94       	dec	r0
 46e:	16 16       	cp	r1, r22
 470:	17 06       	cpc	r1, r23
 472:	18 06       	cpc	r1, r24
 474:	09 06       	cpc	r0, r25
 476:	08 95       	ret

00000478 <__fp_pscB>:
 478:	00 24       	eor	r0, r0
 47a:	0a 94       	dec	r0
 47c:	12 16       	cp	r1, r18
 47e:	13 06       	cpc	r1, r19
 480:	14 06       	cpc	r1, r20
 482:	05 06       	cpc	r0, r21
 484:	08 95       	ret

00000486 <__fp_round>:
 486:	09 2e       	mov	r0, r25
 488:	03 94       	inc	r0
 48a:	00 0c       	add	r0, r0
 48c:	11 f4       	brne	.+4      	; 0x492 <__fp_round+0xc>
 48e:	88 23       	and	r24, r24
 490:	52 f0       	brmi	.+20     	; 0x4a6 <__fp_round+0x20>
 492:	bb 0f       	add	r27, r27
 494:	40 f4       	brcc	.+16     	; 0x4a6 <__fp_round+0x20>
 496:	bf 2b       	or	r27, r31
 498:	11 f4       	brne	.+4      	; 0x49e <__fp_round+0x18>
 49a:	60 ff       	sbrs	r22, 0
 49c:	04 c0       	rjmp	.+8      	; 0x4a6 <__fp_round+0x20>
 49e:	6f 5f       	subi	r22, 0xFF	; 255
 4a0:	7f 4f       	sbci	r23, 0xFF	; 255
 4a2:	8f 4f       	sbci	r24, 0xFF	; 255
 4a4:	9f 4f       	sbci	r25, 0xFF	; 255
 4a6:	08 95       	ret

000004a8 <__fp_split3>:
 4a8:	57 fd       	sbrc	r21, 7
 4aa:	90 58       	subi	r25, 0x80	; 128
 4ac:	44 0f       	add	r20, r20
 4ae:	55 1f       	adc	r21, r21
 4b0:	59 f0       	breq	.+22     	; 0x4c8 <__fp_splitA+0x10>
 4b2:	5f 3f       	cpi	r21, 0xFF	; 255
 4b4:	71 f0       	breq	.+28     	; 0x4d2 <__fp_splitA+0x1a>
 4b6:	47 95       	ror	r20

000004b8 <__fp_splitA>:
 4b8:	88 0f       	add	r24, r24
 4ba:	97 fb       	bst	r25, 7
 4bc:	99 1f       	adc	r25, r25
 4be:	61 f0       	breq	.+24     	; 0x4d8 <__fp_splitA+0x20>
 4c0:	9f 3f       	cpi	r25, 0xFF	; 255
 4c2:	79 f0       	breq	.+30     	; 0x4e2 <__fp_splitA+0x2a>
 4c4:	87 95       	ror	r24
 4c6:	08 95       	ret
 4c8:	12 16       	cp	r1, r18
 4ca:	13 06       	cpc	r1, r19
 4cc:	14 06       	cpc	r1, r20
 4ce:	55 1f       	adc	r21, r21
 4d0:	f2 cf       	rjmp	.-28     	; 0x4b6 <__fp_split3+0xe>
 4d2:	46 95       	lsr	r20
 4d4:	f1 df       	rcall	.-30     	; 0x4b8 <__fp_splitA>
 4d6:	08 c0       	rjmp	.+16     	; 0x4e8 <__fp_splitA+0x30>
 4d8:	16 16       	cp	r1, r22
 4da:	17 06       	cpc	r1, r23
 4dc:	18 06       	cpc	r1, r24
 4de:	99 1f       	adc	r25, r25
 4e0:	f1 cf       	rjmp	.-30     	; 0x4c4 <__fp_splitA+0xc>
 4e2:	86 95       	lsr	r24
 4e4:	71 05       	cpc	r23, r1
 4e6:	61 05       	cpc	r22, r1
 4e8:	08 94       	sec
 4ea:	08 95       	ret

000004ec <__fp_zero>:
 4ec:	e8 94       	clt

000004ee <__fp_szero>:
 4ee:	bb 27       	eor	r27, r27
 4f0:	66 27       	eor	r22, r22
 4f2:	77 27       	eor	r23, r23
 4f4:	cb 01       	movw	r24, r22
 4f6:	97 f9       	bld	r25, 7
 4f8:	08 95       	ret

000004fa <__mulsf3>:
 4fa:	0e 94 90 02 	call	0x520	; 0x520 <__mulsf3x>
 4fe:	0c 94 43 02 	jmp	0x486	; 0x486 <__fp_round>
 502:	0e 94 35 02 	call	0x46a	; 0x46a <__fp_pscA>
 506:	38 f0       	brcs	.+14     	; 0x516 <__mulsf3+0x1c>
 508:	0e 94 3c 02 	call	0x478	; 0x478 <__fp_pscB>
 50c:	20 f0       	brcs	.+8      	; 0x516 <__mulsf3+0x1c>
 50e:	95 23       	and	r25, r21
 510:	11 f0       	breq	.+4      	; 0x516 <__mulsf3+0x1c>
 512:	0c 94 2c 02 	jmp	0x458	; 0x458 <__fp_inf>
 516:	0c 94 32 02 	jmp	0x464	; 0x464 <__fp_nan>
 51a:	11 24       	eor	r1, r1
 51c:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__fp_szero>

00000520 <__mulsf3x>:
 520:	0e 94 54 02 	call	0x4a8	; 0x4a8 <__fp_split3>
 524:	70 f3       	brcs	.-36     	; 0x502 <__mulsf3+0x8>

00000526 <__mulsf3_pse>:
 526:	95 9f       	mul	r25, r21
 528:	c1 f3       	breq	.-16     	; 0x51a <__mulsf3+0x20>
 52a:	95 0f       	add	r25, r21
 52c:	50 e0       	ldi	r21, 0x00	; 0
 52e:	55 1f       	adc	r21, r21
 530:	62 9f       	mul	r22, r18
 532:	f0 01       	movw	r30, r0
 534:	72 9f       	mul	r23, r18
 536:	bb 27       	eor	r27, r27
 538:	f0 0d       	add	r31, r0
 53a:	b1 1d       	adc	r27, r1
 53c:	63 9f       	mul	r22, r19
 53e:	aa 27       	eor	r26, r26
 540:	f0 0d       	add	r31, r0
 542:	b1 1d       	adc	r27, r1
 544:	aa 1f       	adc	r26, r26
 546:	64 9f       	mul	r22, r20
 548:	66 27       	eor	r22, r22
 54a:	b0 0d       	add	r27, r0
 54c:	a1 1d       	adc	r26, r1
 54e:	66 1f       	adc	r22, r22
 550:	82 9f       	mul	r24, r18
 552:	22 27       	eor	r18, r18
 554:	b0 0d       	add	r27, r0
 556:	a1 1d       	adc	r26, r1
 558:	62 1f       	adc	r22, r18
 55a:	73 9f       	mul	r23, r19
 55c:	b0 0d       	add	r27, r0
 55e:	a1 1d       	adc	r26, r1
 560:	62 1f       	adc	r22, r18
 562:	83 9f       	mul	r24, r19
 564:	a0 0d       	add	r26, r0
 566:	61 1d       	adc	r22, r1
 568:	22 1f       	adc	r18, r18
 56a:	74 9f       	mul	r23, r20
 56c:	33 27       	eor	r19, r19
 56e:	a0 0d       	add	r26, r0
 570:	61 1d       	adc	r22, r1
 572:	23 1f       	adc	r18, r19
 574:	84 9f       	mul	r24, r20
 576:	60 0d       	add	r22, r0
 578:	21 1d       	adc	r18, r1
 57a:	82 2f       	mov	r24, r18
 57c:	76 2f       	mov	r23, r22
 57e:	6a 2f       	mov	r22, r26
 580:	11 24       	eor	r1, r1
 582:	9f 57       	subi	r25, 0x7F	; 127
 584:	50 40       	sbci	r21, 0x00	; 0
 586:	9a f0       	brmi	.+38     	; 0x5ae <__mulsf3_pse+0x88>
 588:	f1 f0       	breq	.+60     	; 0x5c6 <__mulsf3_pse+0xa0>
 58a:	88 23       	and	r24, r24
 58c:	4a f0       	brmi	.+18     	; 0x5a0 <__mulsf3_pse+0x7a>
 58e:	ee 0f       	add	r30, r30
 590:	ff 1f       	adc	r31, r31
 592:	bb 1f       	adc	r27, r27
 594:	66 1f       	adc	r22, r22
 596:	77 1f       	adc	r23, r23
 598:	88 1f       	adc	r24, r24
 59a:	91 50       	subi	r25, 0x01	; 1
 59c:	50 40       	sbci	r21, 0x00	; 0
 59e:	a9 f7       	brne	.-22     	; 0x58a <__mulsf3_pse+0x64>
 5a0:	9e 3f       	cpi	r25, 0xFE	; 254
 5a2:	51 05       	cpc	r21, r1
 5a4:	80 f0       	brcs	.+32     	; 0x5c6 <__mulsf3_pse+0xa0>
 5a6:	0c 94 2c 02 	jmp	0x458	; 0x458 <__fp_inf>
 5aa:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__fp_szero>
 5ae:	5f 3f       	cpi	r21, 0xFF	; 255
 5b0:	e4 f3       	brlt	.-8      	; 0x5aa <__mulsf3_pse+0x84>
 5b2:	98 3e       	cpi	r25, 0xE8	; 232
 5b4:	d4 f3       	brlt	.-12     	; 0x5aa <__mulsf3_pse+0x84>
 5b6:	86 95       	lsr	r24
 5b8:	77 95       	ror	r23
 5ba:	67 95       	ror	r22
 5bc:	b7 95       	ror	r27
 5be:	f7 95       	ror	r31
 5c0:	e7 95       	ror	r30
 5c2:	9f 5f       	subi	r25, 0xFF	; 255
 5c4:	c1 f7       	brne	.-16     	; 0x5b6 <__mulsf3_pse+0x90>
 5c6:	fe 2b       	or	r31, r30
 5c8:	88 0f       	add	r24, r24
 5ca:	91 1d       	adc	r25, r1
 5cc:	96 95       	lsr	r25
 5ce:	87 95       	ror	r24
 5d0:	97 f9       	bld	r25, 7
 5d2:	08 95       	ret

000005d4 <_exit>:
 5d4:	f8 94       	cli

000005d6 <__stop_program>:
 5d6:	ff cf       	rjmp	.-2      	; 0x5d6 <__stop_program>
